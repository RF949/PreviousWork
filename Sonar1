Arduino IDE:
#include <Servo.h> //Including the Servo package
Servo myServo; 
int trigPin = 10; //Initialising variables
int echoPin = 11;
long duration;
int distance;

void setup() {
  Serial.begin(9600);   //Setting the serial port for the board
  myServo.attach(12);  
  pinMode(trigPin, OUTPUT); //Setting the trigPin (10) to OUTPUT
  pinMode(echoPin, INPUT);  //Setting the echoPin (11) to an INPUT
}

void loop() {
 print_serial(); //Continuously print the serial (shown below)
} 
void print_serial(){
  for(int i=165;i>15;i--){  //i being the degrees in which the servo is at
  myServo.write(i);
  delay(30);
  distance = measures_the_distance();
  Serial.print(i); //Printing the degrees
  Serial.print(",");
  Serial.print(distance); //Printing the distance 
  Serial.print(".");
  }
  for(int i=15;i<=165;i++){  //i being the degrees which the servo is at
  myServo.write(i);
  delay(30);
  distance = measures_the_distance();
  Serial.print(i); //printing i to the moniter
  Serial.print(","); 
  Serial.print(distance); //printing the distance to the moniter
  Serial.print("."); 
  } 
}
int measures_the_distance(){ 
  digitalWrite(trigPin, LOW); //setting the trigPin on and off to allow an acho to be made
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); 
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH); 
  distance= duration*0.034/2; //calculating the distance from the object infront of the ultrasonic senser
  return distance;
}

Processing Java:
import processing.serial.*;   //importing packages 
import java.awt.event.KeyEvent;   
import java.io.IOException;
Serial myPort;  //Changing the Serial variable to myPort
String angle="";   //Creating strings for the angle of the servo, distance variable which is calculated in the arduino IDE,
String distance="";  // the data from the ultrasonic sensor, and if there is no object there
String data="";  
String noObject;
float pixsDistance;  //The distance of the object from the translated centre of the display
int iAngle, iDistance;    
int index1=0;
int index2=0;
PFont orcFont;    //Font for the text

void setup() {
 size (1900,1200);    //Setting the size of the display
 smooth();   
 myPort = new Serial(this,"COM8", 9600);   //Getting the serial baud code and the COM Port data
 myPort.bufferUntil('.'); 
}

void draw() {
  
  fill(98,245,31);    //Drawing the outline of the display
  noStroke();
  fill(0,4); 
  rect(0, 0, width, 1010); 
  
  drawRadar();   //Calling each function
  drawLine();
  drawObject();
  drawText();
}

void serialEvent (Serial myPort) { 
  data = myPort.readStringUntil('.');
  data = data.substring(0,data.length()-1);
  
  index1 = data.indexOf(","); 
  angle= data.substring(0, index1);
  distance= data.substring(index1+1, data.length()); 
  
  iAngle = int(angle);
  iDistance = int(distance);
}

void drawRadar() {    //This function draws the white lines of the radar
  pushMatrix();
  translate(700,700); 
  noFill();
  strokeWeight(2);
  stroke(255,245,255);
  // draws the arc lines
  arc(0,0,1800,1800,PI,TWO_PI);    //Drawing the white lines arcs which go from left to right of the screen
  arc(0,0,1400,1400,PI,TWO_PI);
  arc(0,0,1000,1000,PI,TWO_PI);
  arc(0,0,600,600,PI,TWO_PI);
 
  line(-960,0,960,0);
  line(0,0,-960*cos(radians(30)),-960*sin(radians(30)));    //Calculations for where the white lines going from top to bottom of the display will be
  line(0,0,-960*cos(radians(60)),-960*sin(radians(60)));
  line(0,0,-960*cos(radians(90)),-960*sin(radians(90)));
  line(0,0,-960*cos(radians(120)),-960*sin(radians(120)));
  line(0,0,-960*cos(radians(150)),-960*sin(radians(150)));
  line(-960*cos(radians(30)),0,960,0);
  popMatrix();
}
void drawObject() {    //In this function, if an object is detected in the area of the sensor, red lines will appear relevant to where the object is
  pushMatrix();
  translate(700,700);
  strokeWeight(9);
  stroke(255,0,0); 
  pixsDistance = iDistance*22.5;
  if(iDistance<40) 
     line(pixsDistance*cos(radians(iAngle)),-pixsDistance*sin(radians(iAngle)),950*cos(radians(iAngle)),-950*sin(radians(iAngle)));
  popMatrix();
}
void drawLine() {    //This function draws a blue line if the object is too far away or if there is no object there
  pushMatrix();
  strokeWeight(9);
  stroke(30,10,250);
  translate(700,700); 
  line(0,0,950*cos(radians(iAngle)),-950*sin(radians(iAngle))); 
  popMatrix();
}

void drawText() {    //This function simply draws the text on the screen
  
  pushMatrix();
  fill(0,0,0);
  noStroke();
  rect(0, 1010, width, 600);    
  textSize(25);        //Font size
  fill(255,255,255);    //Fill = what colour
  translate(800,650);    //Translate = Where on the screen
  rotate(-radians(-60));   //For effect, the text is rotated relevant to where it is on the circle
  text("30°",0,0);
  resetMatrix();
  translate(740,600);
  rotate(-radians(-30));
  text("60°",0,0);
  resetMatrix();
  translate(680,590);
  rotate(radians(0));
  text("90°",0,0);
  resetMatrix(); 
  translate(620,620);
  rotate(radians(-30));
  text("120°",0,0);
  resetMatrix();
  translate(590,680);
  rotate(radians(-60));
  text("150°",0,0);
resetMatrix();
  popMatrix(); 
}

